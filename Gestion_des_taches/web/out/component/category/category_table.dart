// Auto-generated from category_table.html.
// DO NOT EDIT.

library x_category_table;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'dart:html';
import '../../../component/compo_commun/sauvegarde.dart' as ComposantesCommuns;
import 'package:Gestion_des_taches/dartlero_categorie_taches.dart';
import 'package:web_ui/web_ui.dart';
import '../taches/link_table.dart';



class CategoryTable extends WebComponent {
  /** Autogenerated from the template. */

  /** CSS class constants. */
  static Map<String, String> _css = {};

  /**
   * Shadow root for this component. We use 'var' to allow simulating shadow DOM
   * on browsers that don't support this feature.
   */
  var _root;
  autogenerated.DivElement __e19;
  autogenerated.ImageElement __e16;
  autogenerated.InputElement __addCategoryCode, __addCategoryDescription;
  autogenerated.SpanElement __addCategoryMessage;
  autogenerated.TableSectionElement __e15;
  autogenerated.Template __t;

  CategoryTable.forElement(e) : super.forElement(e);

  void created_autogenerated() {
    _root = createShadowRoot();
    __t = new autogenerated.Template(_root);
    _root.innerHtml = '''
        <table>
          <caption class="marker">
            Catégories
          </caption>
          <tbody><tr>
            <th>Nom</th>
            <th>Description</th>
            <th></th>

          </tr>
          </tbody><tbody id="__e-15"></tbody>
          <tbody><tr>
          <td><input id="add-category-code" type="text" style="width:90%"></td>
          <td><input id="add-category-description" type="text" style="width:95%"></td>
          <td><img src="../component/compo_commun/icones/folder_add.png" alt="Ajouter catégorie" id="__e-16"></td>
           </tr>

           </tbody></table>
          <span id="add-category-message"></span>

        <br>
        <div id="__e-19" style="display:none"></div>
      ''';
    __e15 = _root.query('#__e-15');
    __t.loop(__e15, () => categories.toList(), (category, __t) {
      var __e14, __e8;
      __e8 = new autogenerated.Element.html('<tr style="display:none"></tr>');
      __t.conditional(__e8, () => displayCategory, (__t) {
        var __e2, __e4, __e5, __e6, __e7, __editCategoryButton;
        __e7 = new autogenerated.Element.html('<tr template="" if="displayCategory">\n              <td id="__e-2"></td>\n              <td id="__e-4"></td>\n              <td><img src="../component/compo_commun/icones/folder_magnify.png" alt="Tâches" id="__e-5">\n              <img id="editCategoryButton" src="../component/compo_commun/icones/folder_edit.png" alt="Modifier">\n              <img src="../component/compo_commun/icones/folder_delete.png" alt="Supprimer" id="__e-6">\n              </td>\n            </tr>');
        __e2 = __e7.query('#__e-2');
        var __binding1 = __t.contentBind(() =>  category.code , false);
        __e2.nodes.addAll([new autogenerated.Text('    \n                '),
            __binding1,
            new autogenerated.Text('        \n              ')]);
        __e4 = __e7.query('#__e-4');
        var __binding3 = __t.contentBind(() =>  category.description , false);
        __e4.nodes.addAll([new autogenerated.Text('\n                '),
            __binding3,
            new autogenerated.Text('\n              ')]);
        __e5 = __e7.query('#__e-5');
        __t.listen(__e5.onClick, ($event) { showLinks(category); });
        __editCategoryButton = __e7.query('#editCategoryButton');
        __t.listen(__editCategoryButton.onClick, ($event) { edit(category); });
        __e6 = __e7.query('#__e-6');
        __t.listen(__e6.onClick, ($event) { delete(category); });
      __t.add(__e7);
      });

      __e14 = new autogenerated.Element.html('<tr style="display:none"></tr>');
      __t.conditional(__e14, () => editCategory, (__t) {
        var __e10, __e11, __e12, __e13, __editCategoryButton, __editCategoryDescription;
        __e13 = new autogenerated.Element.html('<tr template="" if="editCategory">\n              <td id="__e-10"></td>\n              <td>\n                <input id="edit-category-description" type="text" size="32">\n              </td>\n              <td><img src="../component/compo_commun/icones/folder_magnify.png" alt="Tâches" id="__e-11">\n              <img id="editCategoryButton" src="../component/compo_commun/icones/folder_edit.png" alt="Modifier">\n              <img src="../component/compo_commun/icones/folder_delete.png" alt="Supprimer" id="__e-12">\n              </td>\n             </tr>');
        __e10 = __e13.query('#__e-10');
        var __binding9 = __t.contentBind(() =>  category.code , false);
        __e10.nodes.addAll([new autogenerated.Text('\n                '),
            __binding9,
            new autogenerated.Text('        \n               '),
            new autogenerated.Text('\n                \n              ')]);
        __editCategoryDescription = __e13.query('#edit-category-description');
        __t.oneWayBind(() =>  category.description , (e) { __editCategoryDescription.value = e; }, false, false);
        __e11 = __e13.query('#__e-11');
        __t.listen(__e11.onClick, ($event) { showLinks(category); });
        __editCategoryButton = __e13.query('#editCategoryButton');
        __t.listen(__editCategoryButton.onClick, ($event) { edit(category); });
        __e12 = __e13.query('#__e-12');
        __t.listen(__e12.onClick, ($event) { delete(category); });
      __t.add(__e13);
      });

    __t.addAll([new autogenerated.Text('\n            '),
        __e8,
        new autogenerated.Text('\n            '),
        __e14,
        new autogenerated.Text('\n          ')]);
    }, isTemplateElement: false);
    __addCategoryCode = _root.query('#add-category-code');
    __addCategoryDescription = _root.query('#add-category-description');
    __e16 = _root.query('#__e-16');
    __t.listen(__e16.onClick, ($event) { ajouterCategorie(); });
    __addCategoryMessage = _root.query('#add-category-message');
    __e19 = _root.query('#__e-19');
    __t.conditional(__e19, () => showCategoryLinks, (__t) {
      var __e17, __e18;
      __e18 = new autogenerated.Element.html('<div template="" if="showCategoryLinks">\n          <x-link-table id="__e-17">\n          </x-link-table>\n        </div>');
      __e17 = __e18.query('#__e-17');
      __t.oneWayBind(() =>  category , (e) { __e17.xtag.category = e; }, false, false);
      __t.oneWayBind(() =>  category.links , (e) { __e17.xtag.links = e; }, false, false);
      new LinkTable.forElement(__e17);
      __t.component(__e17);
    __t.add(__e18);
    });

    __t.create();
  }

  void inserted_autogenerated() {
    __t.insert();
  }

  void removed_autogenerated() {
    __t.remove();
    __t = __e15 = __addCategoryCode = __addCategoryDescription = __e16 = __addCategoryMessage = __e19 = null;
  }

  void composeChildren() {
    super.composeChildren();
    if (_root is! autogenerated.ShadowRoot) _root = this;
  }

  /** Original code from the component. */

  Categories categories;
  Category category;
  
  bool showCategoryLinks = false;
  bool displayCategory = true;
  bool editCategory = false;
  
  update() {
    InputElement description = query('#edit-category-description');
    category.description = description.value;
    var categoryTable = document.query('x-category-table').xtag;
    categoryTable.showCategoryEdit = false;
  }
  
  edit(category) {
    editCategory = true;
    displayCategory = false;
    this.category = category;
    
  }
  
  delete(category) {
    categories.remove(category);
    showCategoryLinks = false;
    ComposantesCommuns.sauvegarder(categories);
  }

  showLinks(category) {
    showCategoryLinks = true;
    this.category = category;
    category.links.order();
  }
  
  ajouterCategorie() {
    InputElement code = query('#add-category-code');
    InputElement description = query('#add-category-description');
    Element message = query("#add-category-message");
    var error = false;
    message.text = '';
    if (code.value.trim() == '') {
      message.text = 'category name is mandatory; ${message.text}';
      error = true;
    }
    if (!error) {
      var category = new Category();
      category.code = code.value;
      category.description = description.value;
      if (categories.add(category)) {
        message.text = 'added';
        var categoryTable = document.query('x-category-table').xtag;
        categoryTable.categories.order();
        ComposantesCommuns.sauvegarder(categories);
      } else {
        message.text = 'category name already in use';
      }
    }
  }
  
}
//@ sourceMappingURL=category_table.dart.map