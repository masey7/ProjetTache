// Auto-generated from link_table.html.
// DO NOT EDIT.

library x_link_table;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'package:web_ui/observe/observable.dart' as __observe;
import 'dart:html';
import 'package:Gestion_des_taches/dartlero_categorie_taches.dart';
import 'package:web_ui/web_ui.dart';
import 'link_add.dart';
import 'link_edit.dart';



class LinkTable extends WebComponent {
  /** Autogenerated from the template. */

  /** CSS class constants. */
  static Map<String, String> _css = {};

  /**
   * Shadow root for this component. We use 'var' to allow simulating shadow DOM
   * on browsers that don't support this feature.
   */
  var _root;
  static final __html1 = new autogenerated.Element.html('<div template="" if="showLinkAdd">\n          <x-link-add id="__e-20">\n          </x-link-add>\n        </div>'), __html2 = new autogenerated.Element.html('<div template="" if="showLinkEdit">\n          <x-link-edit id="__e-23">\n          </x-link-edit>\n        </div>'), __html3 = new autogenerated.Element.html('<button id="addLinkButton">Show Add</button>'), __html4 = new autogenerated.Element.html('<tr>\n              <td>\n                <a id="__e-29"></a>\n              </td>\n              <td id="__e-31"></td>\n              <td><button id="editLinkButton">\n                Edit</button>\n              </td>\n              <td><button id="__e-32">Remove</button></td>\n            </tr>'), __shadowTemplate = new autogenerated.DocumentFragment.html('''
        <div id="__e-22" style="display:none"></div>
        <div id="__e-25" style="display:none"></div>
        <table>
          <caption class="marker" id="__e-27"></caption>
          <tbody><tr>
            <th>Web Link</th>
            <th>Description</th>
            <th>Edit</th>
            <th>Remove</th>
          </tr>
          </tbody><tbody id="__e-34"></tbody>
        </table>
      ''');
  autogenerated.ButtonElement __addLinkButton;
  autogenerated.DivElement __e22, __e25;
  autogenerated.TableCaptionElement __e27;
  autogenerated.TableSectionElement __e34;
  autogenerated.Template __t;

  LinkTable.forElement(e) : super.forElement(e);

  void created_autogenerated() {
    _root = createShadowRoot();
    __t = new autogenerated.Template(_root);
    _root.nodes.add(__shadowTemplate.clone(true));
    __e22 = _root.query('#__e-22');
    __t.conditional(__e22, () => showLinkAdd, (__t) {
      var __e20, __e21;
      __e21 = __html1.clone(true);
      __e20 = __e21.query('#__e-20');
      __t.oneWayBind(() =>  category , (e) { __e20.xtag.category = e; }, false, false);
      __t.oneWayBind(() =>  links , (e) { __e20.xtag.links = e; }, false, false);
      __t.component(new LinkAdd.forElement(__e20));
    __t.add(__e21);
    });

    __e25 = _root.query('#__e-25');
    __t.conditional(__e25, () => showLinkEdit, (__t) {
      var __e23, __e24;
      __e24 = __html2.clone(true);
      __e23 = __e24.query('#__e-23');
      __t.oneWayBind(() =>  category , (e) { __e23.xtag.category = e; }, false, false);
      __t.oneWayBind(() =>  link , (e) { __e23.xtag.link = e; }, false, false);
      __t.oneWayBind(() =>  links , (e) { __e23.xtag.links = e; }, false, false);
      __t.component(new LinkEdit.forElement(__e23));
    __t.add(__e24);
    });

    __e27 = _root.query('#__e-27');
    var __binding26 = __t.contentBind(() =>  category.code , false);
    __addLinkButton = __html3.clone(true);
    __t.listen(__addLinkButton.onClick, ($event) { add(); });
    __e27.nodes.addAll([new autogenerated.Text('\n            Links of '),
        __binding26,
        new autogenerated.Text(' category\n            '),
        __addLinkButton,
        new autogenerated.Text('\n          ')]);
    __e34 = _root.query('#__e-34');
    __t.loop(__e34, () => links.toList(), (link, __t) {
      var __e29, __e31, __e32, __e33, __editLinkButton;
      __e33 = __html4.clone(true);
      __e29 = __e33.query('#__e-29');
      var __binding28 = __t.contentBind(() =>  link.code , false);
      __e29.nodes.addAll([new autogenerated.Text('\n                  '),
          __binding28,
          new autogenerated.Text('\n                ')]);
      __t.oneWayBind(() =>  link.url , (e) { __e29.href = e; }, false, true);
      __e31 = __e33.query('#__e-31');
      var __binding30 = __t.contentBind(() =>  link.description , false);
      __e31.nodes.add(__binding30);
      __editLinkButton = __e33.query('#editLinkButton');
      __t.listen(__editLinkButton.onClick, ($event) { edit(link); });
      __e32 = __e33.query('#__e-32');
      __t.listen(__e32.onClick, ($event) { delete(link); });
    __t.addAll([new autogenerated.Text('\n            '),
        __e33,
        new autogenerated.Text('\n          ')]);
    }, isTemplateElement: false);
    __t.create();
  }

  void inserted_autogenerated() {
    __t.insert();
  }

  void removed_autogenerated() {
    __t.remove();
    __t = __e22 = __e25 = __e27 = __addLinkButton = __e34 = null;
  }

  void composeChildren() {
    super.composeChildren();
    if (_root is! autogenerated.ShadowRoot) _root = this;
  }

  /** Original code from the component. */

  Category category;
  Links links;
  Link link;

  bool showLinkAdd = false;
  bool showLinkEdit = false;

  add() {
    ButtonElement addLink = query("#addLinkButton");
    if (addLink.text == 'Show Add') {
      showLinkAdd = true;
      addLink.text = 'Hide Add';
    } else {
      showLinkAdd = false;
      addLink.text = 'Show Add';
    }
  }

  edit(link) {
    showLinkEdit = true;
    this.link = link;
  }

  delete(link) {
    links.remove(link);
  }

}
//@ sourceMappingURL=link_table.dart.map